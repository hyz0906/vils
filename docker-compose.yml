version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: vils_postgres
    environment:
      POSTGRES_DB: vils_db
      POSTGRES_USER: vils_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - vils_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vils_user -d vils_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: vils_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - vils_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vils_backend
    environment:
      DATABASE_URL: postgresql://vils_user:${DB_PASSWORD:-secure_password}@postgres:5432/vils_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      ENCRYPTION_MASTER_KEY: ${ENCRYPTION_MASTER_KEY:-your-encryption-key}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://frontend:80}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vils_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vils_celery
    command: celery -A src.celery_app worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql://vils_user:${DB_PASSWORD:-secure_password}@postgres:5432/vils_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      ENCRYPTION_MASTER_KEY: ${ENCRYPTION_MASTER_KEY:-your-encryption-key}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vils_network
    restart: unless-stopped

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vils_celery_beat
    command: celery -A src.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://vils_user:${DB_PASSWORD:-secure_password}@postgres:5432/vils_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vils_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: vils_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:8000
    depends_on:
      - backend
    networks:
      - vils_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: vils_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - vils_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vils_network:
    driver: bridge